import { Router } from 'express';
import { authenticate } from '../../middlewares/auth.js';
import { hashPassword } from '../../utils/hash.js';
import pool from '../../db/connection.js';

const router = Router();

// Middleware: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
function onlySuperAdmin(req, res, next) {
  if (req.admin?.role !== 'superadmin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
  }
  next();
}

// GET /api/admin/admins ‚Äî –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "admin"
router.get('/admins', authenticate, onlySuperAdmin, async (req, res) => {
  try {
    const [rows] = await pool.query(
      'SELECT id, username, role, created_at FROM administrators WHERE role = ?',
      ['admin']
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// POST /api/admin/admins ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/admins', authenticate, onlySuperAdmin, async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const passwordHash = await hashPassword(password);
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', username);
    await pool.query(
      `INSERT INTO administrators (username, password_hash, role, created_at)
       VALUES (?, ?, 'admin', NOW())`,
      [username, passwordHash]
    );
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' });
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err.code, err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

// PUT /api/admin/admins/:id ‚Äî –û–±–Ω–æ–≤–∏—Ç—å –∏–º—è –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å
router.put('/admins/:id', authenticate, onlySuperAdmin, async (req, res) => {
  const { username, password } = req.body;
  const fields = [];
  const values = [];

  if (username) {
    fields.push('username = ?');
    values.push(username);
  }

  if (password) {
    const passwordHash = await hashPassword(password);
    fields.push('password_hash = ?');
    values.push(passwordHash);
  }

  if (fields.length === 0) {
    return res.status(400).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }

  try {
    values.push(req.params.id);
    await pool.query(
      `UPDATE administrators SET ${fields.join(', ')} WHERE id = ? AND role = 'admin'`,
      values
    );
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});

// DELETE /api/admin/admins/:id ‚Äî –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/admins/:id', authenticate, onlySuperAdmin, async (req, res) => {
  try {
    await pool.query(
      'DELETE FROM administrators WHERE id = ? AND role = "admin"',
      [req.params.id]
    );
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
  }
});

export default router;
