import{r as f,l as A,m as P}from"./index-RDm8gRJE.js";const j=(e,t,n,a)=>{const o=[n,{code:t,...a||{}}];if(e?.services?.logger?.forward)return e.services.logger.forward(o,"warn","react-i18next::",!0);N(o[0])&&(o[0]=`react-i18next:: ${o[0]}`),e?.services?.logger?.warn?e.services.logger.warn(...o):console?.warn&&console.warn(...o)},O={},x=(e,t,n,a)=>{N(n)&&O[n]||(N(n)&&(O[n]=new Date),j(e,t,n,a))},v=(e,t)=>()=>{if(e.isInitialized)t();else{const n=()=>{setTimeout(()=>{e.off("initialized",n)},0),t()};e.on("initialized",n)}},E=(e,t,n)=>{e.loadNamespaces(t,v(e,n))},R=(e,t,n,a)=>{if(N(n)&&(n=[n]),e.options.preload&&e.options.preload.indexOf(t)>-1)return E(e,n,a);n.forEach(o=>{e.options.ns.indexOf(o)<0&&e.options.ns.push(o)}),e.loadLanguages(t,v(e,a))},k=(e,t,n={})=>!t.languages||!t.languages.length?(x(t,"NO_LANGUAGES","i18n.languages were undefined or empty",{languages:t.languages}),!0):t.hasLoadedNamespace(e,{lng:n.lng,precheck:(a,o)=>{if(n.bindI18n?.indexOf("languageChanging")>-1&&a.services.backendConnector.backend&&a.isLanguageChangingTo&&!o(a.isLanguageChangingTo,e))return!1}}),N=e=>typeof e=="string",F=e=>typeof e=="object"&&e!==null,M=f.createContext();class U{constructor(){this.usedNamespaces={}}addUsedNamespaces(t){t.forEach(n=>{this.usedNamespaces[n]||(this.usedNamespaces[n]=!0)})}getUsedNamespaces(){return Object.keys(this.usedNamespaces)}}const _=(e,t)=>{const n=f.useRef();return f.useEffect(()=>{n.current=e},[e,t]),n.current},z=(e,t,n,a)=>e.getFixedT(t,n,a),G=(e,t,n,a)=>f.useCallback(z(e,t,n,a),[e,t,n,a]),J=(e,t={})=>{const{i18n:n}=t,{i18n:a,defaultNS:o}=f.useContext(M)||{},s=n||a||A();if(s&&!s.reportNamespaces&&(s.reportNamespaces=new U),!s){x(s,"NO_I18NEXT_INSTANCE","useTranslation: You will need to pass in an i18next instance by using initReactI18next");const i=(u,l)=>N(l)?l:F(l)&&N(l.defaultValue)?l.defaultValue:Array.isArray(u)?u[u.length-1]:u,c=[i,{},!1];return c.t=i,c.i18n={},c.ready=!1,c}s.options.react?.wait&&x(s,"DEPRECATED_OPTION","useTranslation: It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");const m={...P(),...s.options.react,...t},{useSuspense:C,keyPrefix:T}=m;let r=o||s.options?.defaultNS;r=N(r)?[r]:r||["translation"],s.reportNamespaces.addUsedNamespaces?.(r);const d=(s.isInitialized||s.initializedStoreOnce)&&r.every(i=>k(i,s,m)),L=G(s,t.lng||null,m.nsMode==="fallback"?r:r[0],T),S=()=>L,y=()=>z(s,t.lng||null,m.nsMode==="fallback"?r:r[0],T),[b,p]=f.useState(S);let h=r.join();t.lng&&(h=`${t.lng}${h}`);const I=_(h),g=f.useRef(!0);f.useEffect(()=>{const{bindI18n:i,bindI18nStore:c}=m;g.current=!0,!d&&!C&&(t.lng?R(s,t.lng,r,()=>{g.current&&p(y)}):E(s,r,()=>{g.current&&p(y)})),d&&I&&I!==h&&g.current&&p(y);const u=()=>{g.current&&p(y)};return i&&s?.on(i,u),c&&s?.store.on(c,u),()=>{g.current=!1,s&&i?.split(" ").forEach(l=>s.off(l,u)),c&&s&&c.split(" ").forEach(l=>s.store.off(l,u))}},[s,h]),f.useEffect(()=>{g.current&&d&&p(S)},[s,T,d]);const w=[b,s,d];if(w.t=b,w.i18n=s,w.ready=d,d||!d&&!C)return w;throw new Promise(i=>{t.lng?R(s,t.lng,r,()=>i()):E(s,r,()=>i())})};export{J as u};
//# sourceMappingURL=useTranslation-D2ryNk2k.js.map
